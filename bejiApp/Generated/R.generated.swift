//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `PlantViewController`, and contains static references to 1 segues.
    struct plantViewController {
      /// Segue identifier `toChat`.
      static let toChat: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PlantViewController, ChatViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toChat")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toChat`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toChat(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PlantViewController, ChatViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.plantViewController.toChat, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `PurchaceViewController`, and contains static references to 1 segues.
    struct purchaceViewController {
      /// Segue identifier `toPlants`.
      static let toPlants: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PurchaceViewController, PlantViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toPlants")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toPlants`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toPlants(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PurchaceViewController, PlantViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.purchaceViewController.toPlants, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SelectViewController`, and contains static references to 1 segues.
    struct selectViewController {
      /// Segue identifier `toPurchace`.
      static let toPurchace: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SelectViewController, PurchaceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toPurchace")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toPurchace`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toPurchace(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SelectViewController, PurchaceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.selectViewController.toPurchace, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `StartViewController`, and contains static references to 1 segues.
    struct startViewController {
      /// Segue identifier `toSelect`.
      static let toSelect: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StartViewController, SelectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSelect")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toSelect`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSelect(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StartViewController, SelectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.startViewController.toSelect, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SemiModalViewController`.
    static let semiModalViewController = _R.storyboard.semiModalViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SemiModalViewController", bundle: ...)`
    static func semiModalViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.semiModalViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    /// This `R.image.backGround` struct is generated, and contains static references to 14 images.
    struct backGround {
      /// Image `carrotBackground`.
      static let carrotBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/carrotBackground")
      /// Image `carrotChatBackground`.
      static let carrotChatBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/carrotChatBackground")
      /// Image `cucumberBackground`.
      static let cucumberBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/cucumberBackground")
      /// Image `cucumberChatBackGround`.
      static let cucumberChatBackGround = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/cucumberChatBackGround")
      /// Image `decorationBackground`.
      static let decorationBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/decorationBackground")
      /// Image `eggplantBackground`.
      static let eggplantBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/eggplantBackground")
      /// Image `eggplantChatBackground`.
      static let eggplantChatBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/eggplantChatBackground")
      /// Image `nomalBackground`.
      static let nomalBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/nomalBackground")
      /// Image `onionBackground`.
      static let onionBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/onionBackground")
      /// Image `onionChatBackground`.
      static let onionChatBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/onionChatBackground")
      /// Image `potatoBackground`.
      static let potatoBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/potatoBackground")
      /// Image `potatoChatBackground`.
      static let potatoChatBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/potatoChatBackground")
      /// Image `strawberryBackground`.
      static let strawberryBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/strawberryBackground")
      /// Image `strawberryChatBackground`.
      static let strawberryChatBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackGround/strawberryChatBackground")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "carrotBackground", bundle: ..., traitCollection: ...)`
      static func carrotBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.carrotBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "carrotChatBackground", bundle: ..., traitCollection: ...)`
      static func carrotChatBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.carrotChatBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cucumberBackground", bundle: ..., traitCollection: ...)`
      static func cucumberBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.cucumberBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cucumberChatBackGround", bundle: ..., traitCollection: ...)`
      static func cucumberChatBackGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.cucumberChatBackGround, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "decorationBackground", bundle: ..., traitCollection: ...)`
      static func decorationBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.decorationBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "eggplantBackground", bundle: ..., traitCollection: ...)`
      static func eggplantBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.eggplantBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "eggplantChatBackground", bundle: ..., traitCollection: ...)`
      static func eggplantChatBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.eggplantChatBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "nomalBackground", bundle: ..., traitCollection: ...)`
      static func nomalBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.nomalBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "onionBackground", bundle: ..., traitCollection: ...)`
      static func onionBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.onionBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "onionChatBackground", bundle: ..., traitCollection: ...)`
      static func onionChatBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.onionChatBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "potatoBackground", bundle: ..., traitCollection: ...)`
      static func potatoBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.potatoBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "potatoChatBackground", bundle: ..., traitCollection: ...)`
      static func potatoChatBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.potatoChatBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "strawberryBackground", bundle: ..., traitCollection: ...)`
      static func strawberryBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.strawberryBackground, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "strawberryChatBackground", bundle: ..., traitCollection: ...)`
      static func strawberryChatBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.backGround.strawberryChatBackground, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.button` struct is generated, and contains static references to 11 images.
    struct button {
      /// Image `cameraButton`.
      static let cameraButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/cameraButton")
      /// Image `chatButton`.
      static let chatButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/chatButton")
      /// Image `growButton`.
      static let growButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/growButton")
      /// Image `loginButton`.
      static let loginButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/loginButton")
      /// Image `selectCarrot`.
      static let selectCarrot = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectCarrot")
      /// Image `selectCucumber`.
      static let selectCucumber = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectCucumber")
      /// Image `selectEgplant`.
      static let selectEgplant = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectEgplant")
      /// Image `selectOnion`.
      static let selectOnion = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectOnion")
      /// Image `selectPotato`.
      static let selectPotato = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectPotato")
      /// Image `selectStrawberry`.
      static let selectStrawberry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/selectStrawberry")
      /// Image `startButton`.
      static let startButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "Button/startButton")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cameraButton", bundle: ..., traitCollection: ...)`
      static func cameraButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.cameraButton, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "chatButton", bundle: ..., traitCollection: ...)`
      static func chatButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.chatButton, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "growButton", bundle: ..., traitCollection: ...)`
      static func growButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.growButton, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "loginButton", bundle: ..., traitCollection: ...)`
      static func loginButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.loginButton, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectCarrot", bundle: ..., traitCollection: ...)`
      static func selectCarrot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectCarrot, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectCucumber", bundle: ..., traitCollection: ...)`
      static func selectCucumber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectCucumber, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectEgplant", bundle: ..., traitCollection: ...)`
      static func selectEgplant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectEgplant, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectOnion", bundle: ..., traitCollection: ...)`
      static func selectOnion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectOnion, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectPotato", bundle: ..., traitCollection: ...)`
      static func selectPotato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectPotato, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectStrawberry", bundle: ..., traitCollection: ...)`
      static func selectStrawberry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.selectStrawberry, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "startButton", bundle: ..., traitCollection: ...)`
      static func startButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.button.startButton, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.icon` struct is generated, and contains static references to 15 images.
    struct icon {
      /// Image `BadSign`.
      static let badSign = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/BadSign")
      /// Image `bad`.
      static let bad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bad")
      /// Image `bigCarrot`.
      static let bigCarrot = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigCarrot")
      /// Image `bigCuCamber`.
      static let bigCuCamber = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigCuCamber")
      /// Image `bigEggPlants`.
      static let bigEggPlants = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigEggPlants")
      /// Image `bigPotato`.
      static let bigPotato = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigPotato")
      /// Image `bigStraberry`.
      static let bigStraberry = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigStraberry")
      /// Image `bigonion`.
      static let bigonion = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/bigonion")
      /// Image `carrotIcon`.
      static let carrotIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/carrotIcon")
      /// Image `cucumberIcon`.
      static let cucumberIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/cucumberIcon")
      /// Image `eggPlantsIcon`.
      static let eggPlantsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/eggPlantsIcon")
      /// Image `good`.
      static let good = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/good")
      /// Image `onionIcon`.
      static let onionIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/onionIcon")
      /// Image `potatoIcon`.
      static let potatoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/potatoIcon")
      /// Image `straberryIcon`.
      static let straberryIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon/straberryIcon")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "BadSign", bundle: ..., traitCollection: ...)`
      static func badSign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.badSign, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bad", bundle: ..., traitCollection: ...)`
      static func bad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bad, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigCarrot", bundle: ..., traitCollection: ...)`
      static func bigCarrot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigCarrot, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigCuCamber", bundle: ..., traitCollection: ...)`
      static func bigCuCamber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigCuCamber, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigEggPlants", bundle: ..., traitCollection: ...)`
      static func bigEggPlants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigEggPlants, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigPotato", bundle: ..., traitCollection: ...)`
      static func bigPotato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigPotato, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigStraberry", bundle: ..., traitCollection: ...)`
      static func bigStraberry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigStraberry, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "bigonion", bundle: ..., traitCollection: ...)`
      static func bigonion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.bigonion, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "carrotIcon", bundle: ..., traitCollection: ...)`
      static func carrotIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.carrotIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cucumberIcon", bundle: ..., traitCollection: ...)`
      static func cucumberIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.cucumberIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "eggPlantsIcon", bundle: ..., traitCollection: ...)`
      static func eggPlantsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.eggPlantsIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "good", bundle: ..., traitCollection: ...)`
      static func good(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.good, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "onionIcon", bundle: ..., traitCollection: ...)`
      static func onionIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.onionIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "potatoIcon", bundle: ..., traitCollection: ...)`
      static func potatoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.potatoIcon, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "straberryIcon", bundle: ..., traitCollection: ...)`
      static func straberryIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icon.straberryIcon, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.image.plantsPot` struct is generated, and contains static references to 0 images.
    struct plantsPot {
      /// This `R.image.plantsPot.growth` struct is generated, and contains static references to 6 images.
      struct growth {
        /// Image `growthCarot`.
        static let growthCarot = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthCarot")
        /// Image `growthCucumber`.
        static let growthCucumber = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthCucumber")
        /// Image `growthEggplants`.
        static let growthEggplants = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthEggplants")
        /// Image `growthOnion`.
        static let growthOnion = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthOnion")
        /// Image `growthPotato`.
        static let growthPotato = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthPotato")
        /// Image `growthStrawberry`.
        static let growthStrawberry = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/growth/growthStrawberry")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthCarot", bundle: ..., traitCollection: ...)`
        static func growthCarot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthCarot, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthCucumber", bundle: ..., traitCollection: ...)`
        static func growthCucumber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthCucumber, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthEggplants", bundle: ..., traitCollection: ...)`
        static func growthEggplants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthEggplants, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthOnion", bundle: ..., traitCollection: ...)`
        static func growthOnion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthOnion, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthPotato", bundle: ..., traitCollection: ...)`
        static func growthPotato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthPotato, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "growthStrawberry", bundle: ..., traitCollection: ...)`
        static func growthStrawberry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.growth.growthStrawberry, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.plantsPot.nomal` struct is generated, and contains static references to 6 images.
      struct nomal {
        /// Image `nomalCarrot`.
        static let nomalCarrot = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomalCarrot")
        /// Image `nomalEggplants`.
        static let nomalEggplants = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomalEggplants")
        /// Image `nomalOnion`.
        static let nomalOnion = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomalOnion")
        /// Image `nomalPotato`.
        static let nomalPotato = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomalPotato")
        /// Image `nomalStrawberry`.
        static let nomalStrawberry = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomalStrawberry")
        /// Image `nomaluCunber`.
        static let nomaluCunber = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlantsPot/nomal/nomaluCunber")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomalCarrot", bundle: ..., traitCollection: ...)`
        static func nomalCarrot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomalCarrot, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomalEggplants", bundle: ..., traitCollection: ...)`
        static func nomalEggplants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomalEggplants, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomalOnion", bundle: ..., traitCollection: ...)`
        static func nomalOnion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomalOnion, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomalPotato", bundle: ..., traitCollection: ...)`
        static func nomalPotato(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomalPotato, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomalStrawberry", bundle: ..., traitCollection: ...)`
        static func nomalStrawberry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomalStrawberry, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "nomaluCunber", bundle: ..., traitCollection: ...)`
        static func nomaluCunber(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.plantsPot.nomal.nomaluCunber, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    /// This `R.image.plate` struct is generated, and contains static references to 8 images.
    struct plate {
      /// Image `carrotPlate`.
      static let carrotPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/carrotPlate")
      /// Image `cucumberPlate`.
      static let cucumberPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/cucumberPlate")
      /// Image `eggplantsPlate`.
      static let eggplantsPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/eggplantsPlate")
      /// Image `loginPlate`.
      static let loginPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/loginPlate")
      /// Image `onionPlate`.
      static let onionPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/onionPlate")
      /// Image `potatoPlate`.
      static let potatoPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/potatoPlate")
      /// Image `selectPlantsPlate`.
      static let selectPlantsPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/selectPlantsPlate")
      /// Image `strawberryPlate`.
      static let strawberryPlate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plate/strawberryPlate")

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "carrotPlate", bundle: ..., traitCollection: ...)`
      static func carrotPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.carrotPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "cucumberPlate", bundle: ..., traitCollection: ...)`
      static func cucumberPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.cucumberPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "eggplantsPlate", bundle: ..., traitCollection: ...)`
      static func eggplantsPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.eggplantsPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "loginPlate", bundle: ..., traitCollection: ...)`
      static func loginPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.loginPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "onionPlate", bundle: ..., traitCollection: ...)`
      static func onionPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.onionPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "potatoPlate", bundle: ..., traitCollection: ...)`
      static func potatoPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.potatoPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "selectPlantsPlate", bundle: ..., traitCollection: ...)`
      static func selectPlantsPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.selectPlantsPlate, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIImage(named: "strawberryPlate", bundle: ..., traitCollection: ...)`
      static func strawberryPlate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.plate.strawberryPlate, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try semiModalViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct semiModalViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SemiModalViewController

      let bundle = R.hostingBundle
      let name = "SemiModalViewController"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
